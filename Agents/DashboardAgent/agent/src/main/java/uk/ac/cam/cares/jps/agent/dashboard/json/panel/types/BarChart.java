package uk.ac.cam.cares.jps.agent.dashboard.json.panel.types;

import uk.ac.cam.cares.jps.agent.dashboard.json.panel.layout.TemporalInterval;
import uk.ac.cam.cares.jps.agent.dashboard.json.panel.layout.UnitMapper;
import uk.ac.cam.cares.jps.agent.dashboard.utils.StringHelper;

import java.util.List;

/**
 * A Java representation of a JSON-like model that encapsulates and enforces information
 * about bar chart syntax specific to Grafana dashboard.
 *
 * @author qhouyee
 */
public class BarChart extends TemplatePanel {
    // Default options
    private String orientationOption = "auto";
    private String stackingOption = "normal";
    private String showValueOption = "never";
    private String groupWidthOption = "0.7";
    private static final String WHEN_SQL_START = " WHEN '${";
    private static final String WHEN_SQL_END = ":csv}'='";

    /**
     * Standard Constructor.
     *
     * @param measure            The measure name for this variable.
     * @param itemGroup          The item group for this measure - asset type or rooms.
     * @param unit               Optional measure unit symbol. Can be null.
     * @param databaseId         The database connection ID generated by Grafana.
     * @param timeSeriesMetadata A list of items and their metadata for the specified measure.
     * @param chartType          An integer option to create a specific bar chart panel. 1: measure for the current month; 2: measure trends over last period; 3: measure trends over current period.
     */
    public BarChart(String measure, String itemGroup, String unit, String databaseId, List<String[]> timeSeriesMetadata, int chartType) {
        super(measure, databaseId);
        // Sets the unit for retrieval
        super.setUnit(unit);
        // Set up the title content as well as the empty description and query as an initialisation step
        // Their actual values will be populated accordingly to the chart type required
        String titleContent = StringHelper.addSpaceBetweenCapitalWords(measure);
        String description = "";
        String query = "";
        String tableName = timeSeriesMetadata.get(0)[2];
        String timeIntervalVariableName = StringHelper.formatVariableName(StringHelper.INTERVAL_VARIABLE_NAME);
        // Process the inputs based on the chart type required
        switch (chartType) {
            case 1:
                titleContent += " for current month";
                description = "A bar chart displaying the " + measure.toLowerCase() + " for the current month";
                query = "SELECT to_char(time,'Mon-YY') AS \\\"interval\\\"," +
                        "${" + StringHelper.formatVariableName(measure) + StringHelper.formatVariableName(itemGroup) + ":csv} " +
                        "FROM \\\"" + tableName + "\\\" " +
                        "WHERE time BETWEEN DATE_TRUNC('MONTH', TO_TIMESTAMP(${__to}/1000)) AND TO_TIMESTAMP(${__to}/1000)";
                // Modify the following options
                this.orientationOption = "horizontal";
                this.stackingOption = "none";
                this.showValueOption = "always";
                this.groupWidthOption = "1";
                break;
            case 2:
                titleContent += " trends for last period";
                description = "A bar chart displaying the trends for " + measure.toLowerCase() + " over the last period of the specified interval";
                query = "SELECT CASE" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_WEEK + "' THEN to_char(time,'DD-Mon-YY')" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_MONTH + "' THEN to_char(time,'DD-Mon')" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.WEEKLY_OVER_MONTH + "' THEN 'Week '|| to_char(time,'W Mon-YY')" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.MONTHLY + "' THEN to_char(time,'Mon-YY')" +
                        " END AS \\\"interval\\\",${" +
                        // Custom csv parameter must be lower case with no spacing ie: measurenameitemgroup
                        StringHelper.formatVariableName(measure) + StringHelper.formatVariableName(itemGroup) + ":csv} " +
                        "FROM \\\"" + tableName + "\\\" " +
                        // Time interval according to template variable
                        "WHERE CASE" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_WEEK + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'14 day' AND DATE_TRUNC('DAY', TO_TIMESTAMP(${__to}/1000))-interval'7 day'" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_MONTH + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'2 month' AND DATE_TRUNC('DAY', TO_TIMESTAMP(${__to}/1000))-interval'1 month'" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.WEEKLY_OVER_MONTH + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'2 month' AND DATE_TRUNC('WEEK', TO_TIMESTAMP(${__to}/1000))-interval'1 month'" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.MONTHLY + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'2 year' AND DATE_TRUNC('MONTH', TO_TIMESTAMP(${__to}/1000))-interval'1 year'" +
                        " END;";
                break;
            case 3:
                titleContent += " trends for current period";
                description = "A bar chart displaying the trends for " + measure.toLowerCase() + " over the current period of the specified interval";
                query = "SELECT CASE" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_WEEK + "' THEN to_char(time,'DD-Mon-YY')" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_MONTH + "' THEN to_char(time,'DD-Mon')" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.WEEKLY_OVER_MONTH + "' THEN 'Week '|| to_char(time,'W Mon-YY')" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.MONTHLY + "' THEN to_char(time,'Mon-YY')" +
                        " END AS \\\"interval\\\",${" +
                        // Custom csv parameter must be lower case with no spacing ie: measurenameitemgroup
                        StringHelper.formatVariableName(measure) + StringHelper.formatVariableName(itemGroup) + ":csv} " +
                        "FROM \\\"" + tableName + "\\\" " +
                        // Time interval according to template variable
                        "WHERE CASE" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_WEEK + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'7 day' AND TO_TIMESTAMP(${__to}/1000)" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.DAILY_OVER_MONTH + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'1 month' AND TO_TIMESTAMP(${__to}/1000)" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.WEEKLY_OVER_MONTH + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'1 month' AND TO_TIMESTAMP(${__to}/1000)" +
                        WHEN_SQL_START + timeIntervalVariableName + WHEN_SQL_END + TemporalInterval.MONTHLY + "' THEN time BETWEEN TO_TIMESTAMP(${__to}/1000)-interval'1 year' AND TO_TIMESTAMP(${__to}/1000)" +
                        " END;";
                break;
            default:
                throw new IllegalArgumentException("Invalid input for bar chart type. Only 1,2, or 3 is accepted as valid argument.");
        }
        // Title follows the following format in which middle part is dynamic based on inputs: Measure MIDDLE_CONTENT_BASED_ON_CHART_TYPE [Unit]
        titleContent = unit.equals("null") ? titleContent : titleContent + " [" + unit + "]"; // Unit is optional
        super.setTitle(titleContent);
        super.setDescription(description);
        super.setQuery(new StringBuilder(query));
        // Apply an aggregate transformation before renaming the fields
        super.transformations.addGroupByTransformation("range", timeSeriesMetadata);
        // Add a white space as the group by transformation in Grafana appends the following
        super.transformations.addOrganizeTransformation(" (range)", timeSeriesMetadata);
    }

    /**
     * Construct the Bar Chart syntax as a String.
     *
     * @param height    Height of the panel.
     * @param width     Width of the panel.
     * @param xPosition X position within the dashboard.
     * @param yPosition Y position within the dashboard.
     * @return The Bar Chart syntax as a String.
     */
    @Override
    public String construct(int height, int width, int xPosition, int yPosition) {
        return "{" + super.genCommonJson(height, width, xPosition, yPosition) +
                // Chart type must be set to time series
                ",\"type\": \"barchart\"," +
                // Plugin version
                "\"pluginVersion\": \"10.0.3\"," +
                // Field Configuration
                "\"fieldConfig\": { " +
                // Default field configuration
                "\"defaults\": {\"color\": {\"mode\": \"palette-classic\"}," +
                // Custom parts of field configurations
                "\"custom\":{" + "\"axisCenteredZero\":false,\"axisColorMode\":\"text\"," +
                "\"axisLabel\":\"\",\"axisPlacement\":\"auto\", \"barAlignment\":0, \"drawStyle\":\"line\"," +
                "\"fillOpacity\":80,\"gradientMode\":\"none\",\"lineWidth\":1," +
                "\"hideFrom\":{\"legend\":false, \"tooltip\":false, \"viz\":false}," +
                "\"scaleDistribution\":{\"type\":\"linear\"}, \"showPoints\":\"auto\", \"spanNulls\":false," +
                "\"stacking\":{\"group\":\"A\", \"mode\":\"none\"}, \"thresholdsStyle\":{\"mode\":\"off\"}" +
                "}," + // End of custom part
                // Thresholds
                "\"thresholds\":{\"mode\": \"absolute\", \"steps\": [{\"color\":\"green\",\"value\":null},{\"color\":\"red\",\"value\":80}]}," +
                "\"mappings\": []," +
                "\"unit\":\"" + UnitMapper.getUnitSyntax(super.getUnit()) + "\"" +
                "}," + // End of defaults
                "\"overrides\": []" +
                "}," + // End of field configuration
                // Options
                "\"options\":{" +
                // Legend options
                "\"legend\":{\"calcs\": [], \"displayMode\":\"list\",\"placement\":\"bottom\",\"showLegend\":true}," +
                // Tooltip options
                "\"tooltip\":{\"mode\":\"single\",\"sort\":\"none\"}," +
                // Bar chart options
                "\"barRadius\":0,\"barWidth\":0.8,\"fullHighlight\":false,\"groupWidth\":" + this.groupWidthOption + "," +
                "\"orientation\":\"" + this.orientationOption + "\",\"showValue\":\"" + this.showValueOption + "\",\"stacking\":\"" + this.stackingOption + "\"," +
                "\"xTickLabelRotation\":0,\"xTickLabelSpacing\":100" +
                "}" + // end of options
                "}";
    }
}
